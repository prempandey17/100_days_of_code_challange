Question:

          Given two integer arrays pushed and popped each with distinct values, return true if this could have been the result of a sequence of push and pop operations on an initially empty stack, or false otherwise.

test ase 1:

          Input: pushed = [1,2,3,4,5], popped = [4,5,3,2,1]

          Output: true

          Explanation: We might do the following sequence:

          push(1), push(2), push(3), push(4),

          pop() -> 4,

          push(5),

          pop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1

          

Test case 2:

          Input: pushed = [1,2,3,4,5], popped = [4,3,5,1,2]

          Output: false

          Explanation: 1 cannot be popped before 2.

          

Constraints:

          1 <= pushed.length <= 1000

          0 <= pushed[i] <= 1000

          All the elements of pushed are unique.

          popped.length == pushed.length

          popped is a permutation of pushed.

          

Logics:

          class Solution {

    public boolean validateStackSequences(int[] pushed, int[] popped) {

        Stack<Integer> st = new Stack<>(); // Create a stack

        

        int j = 0; // Intialise one pointer pointing on popped array

        

        for(int val : pushed){

            st.push(val); // insert the values in stack

            while(!st.isEmpty() && st.peek() == popped[j]){ // if st.peek() values equal to popped[j];

                st.pop(); // then pop out

                j++; // increment j

            }

        }

        return st.isEmpty(); // check if stack is empty return true else false

    }

}
