Question:

          You are given two 0-indexed arrays nums and cost consisting each of n positive integers.

          You can do the following operation any number of times:

          Increase or decrease any element of the array nums by 1.

          The cost of doing one operation on the ith element is cost[i].

          Return the minimum total cost such that all the elements of the array nums become equal.

Test case 1:

          Input: nums = [1,3,5,2], cost = [2,3,1,14]

          Output: 8

          Explanation: We can make all the elements equal to 2 in the following way:

          - Increase the 0th element one time. The cost is 2.

          - Decrease the 1st element one time. The cost is 3.

          - Decrease the 2nd element three times. The cost is 1 + 1 + 1 = 3.

          The total cost is 2 + 3 + 3 = 8.

          It can be shown that we cannot make the array equal with a smaller cost.

          

 Test case 2:

          Input: nums = [2,2,2,2,2], cost = [4,2,8,1,3]

          Output: 0

          Explanation: All the elements are already equal, so no operations are needed.

          

 Constraints:

          n == nums.length == cost.length

          1 <= n <= 105

          1 <= nums[i], cost[i] <= 106

          

 Logics:

         class Solution {

    public long minCost(int arr[], int cos[]) {

	int low = Integer.MAX_VALUE;	int high = Integer.MIN_VALUE;

	for (int i = 0; i < arr.length; i++) {

		low = Integer.min(low, arr[i]);

		high = Integer.max(high, arr[i]);

	}

	while ((high - low) >= 3) {

		int mid1 = low + (high - low) / 3;

		int mid2 = high - (high - low) / 3;

		if (computeCost(arr, cos, mid1) < computeCost(arr, cos, mid2)) {

			high = mid2;

		} else {

			low = mid1;

		}

	}

	long res = computeCost(arr, cos, low);

	for (int i = low + 1; i <= high; i++) {

		res = Long.min(res, computeCost(arr, cos, i));

	}

	return res;

}

long computeCost(int arr[], int cos[], int X) {

	long cost = 0;

	for (int i = 0; i < arr.length; i++) {

		cost += Math.abs(arr[i] - X) * ((long)cos[i]);

	}

	return cost;

}
